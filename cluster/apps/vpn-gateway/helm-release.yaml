---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: vpn-gateway
  namespace: vpn-gateway
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://k8s-at-home.com/charts/
      chart: pod-gateway
      version: 5.0.0
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home-charts
        namespace: flux-system
      interval: 5m
  # See https://github.com/k8s-at-home/charts/blob/master/charts/pod-gateway/values.yaml
  values:
    image:
      repository: ghcr.io/k8s-at-home/pod-gateway
      tag: v1.3.1
    routed_namespaces:
      - media
    addons:
      vpn:
        enabled: true
        # This Should be set to `wireguard`. This will set the add-on to use the default settings for Wireguard based connections.
        type: wireguard
        wireguard:
          image:
            repository: ghcr.io/k8s-at-home/wireguard
            tag: v1.0.20210424

        # If the podSecurityContext is set to run as a different user, make sure to run the Wireguard container as UID/GID 568.
        # This is required for it to be able to read certain configuration files.
        securityContext:
          runAsUser: 568
          runAsGroup: 568

        env:
          TZ: "Europe/Warsaw"
          IPTABLES_BACKEND: nft
          KILLSWITCH: "false"

        # The wireguard configuration file provided by your VPN provider goes here.
        #
        # Set AllowedIPs to 0.0.0.0/0 to route all traffic through the VPN.
        #
        # Pay close attention to the PostUp and PreDown lines. They must be added if you wish to run a script when the connection
        # is opened / closed.
        configFile: |-
          [Interface]
          PrivateKey = ${WG_PRIVATE_KEY}
          Address = ${WG_INTERFACE_IP}
          DNS = ${WG_DNS}

          [Peer]
          PublicKey = ${WG_PEER_PUBLIC_KEY}
          AllowedIPs = 0.0.0.0/0
          Endpoint = ${WG_PEER_ENDPOINT}

        networkPolicy:
          enabled: true
          egress:
            - to:
                - ipBlock:
                    cidr: 0.0.0.0/0
              ports:
                # VPN traffic port - change if your provider uses a different port
                - port: ${VPN_PORT}
                  protocol: UDP
            - to:
                # Allow traffic within K8S - change if your K8S cluster uses a different CIDR
                - ipBlock:
                    cidr: ${NETWORK_K8S_CLUSTER_CIDR}
                - ipBlock:
                    cidr: ${NETWORK_K8S_SERVICE_CIDR}
